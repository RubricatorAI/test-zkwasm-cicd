"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.desc = exports.command = void 0;
const path_1 = require("path");
const task_1 = require("../task");
exports.command = "addimage";
exports.desc = "Add wasm image";
const builder = (yargs) => {
    return yargs
        .option("p", {
        alias: "path",
        describe: "Wasm image path",
        demandOption: "The wasm image path is required",
        type: "string",
    })
        .option("u", {
        alias: "address",
        describe: "User address which adding the image",
        demandOption: "User address is required",
        type: "string",
    })
        .option("x", {
        alias: "priv",
        describe: "The priv of user address.",
        demandOption: "The priv is required for signing message.",
        type: "string",
    })
        .option("n", {
        alias: "name",
        describe: "image's name",
        demandOption: "The image name is required.",
        type: "string",
    })
        .option("c", {
        alias: "circuit_size",
        describe: "image's circuits size, if not specified, default is 22",
        type: "number",
        default: 22,
    })
        .option("d", {
        alias: "description",
        describe: "image's description, if not specifed, will use name",
        type: "string",
    })
        .option("creator_paid_proof", {
        describe: "Specify if proofs for this image will be charged to the creator of the image",
        type: "boolean",
        default: false,
    })
        .option("creator_only_add_prove_task", {
        describe: "Specify if proofs for this image are restricted to only be added by the creator of the image",
        type: "boolean",
        default: false,
    })
        .option("auto_submit_network_ids", {
        describe: "List of network ids to automatically submit proofs to. If not specified, proofs will not be automatically submitted.",
        type: "array",
        default: [],
    })
        .option("import_data_image", {
        describe: "The MD5 in which to inherit merkle data from",
        type: "string",
    });
};
exports.builder = builder;
const handler = (argv) => __awaiter(void 0, void 0, void 0, function* () {
    const absolutePath = (0, path_1.resolve)(argv.p);
    console.log("Begin adding image for ", absolutePath);
    let desc = argv.d ? argv.d : argv.n;
    let image_data_image = argv.import_data_image ? argv.import_data_image : undefined;
    yield (0, task_1.addNewWasmImage)(argv.r, absolutePath, argv.u, argv.n, desc, "", argv.circuit_size, argv.x, argv.creator_paid_proof, argv.creator_only_add_prove_task, argv.auto_submit_network_ids, image_data_image);
});
exports.handler = handler;
