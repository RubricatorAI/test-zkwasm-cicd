"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.desc = exports.command = void 0;
const task_1 = require("../task");
const zkwasm_service_helper_1 = require("zkwasm-service-helper");
exports.command = "pressuretest";
exports.desc = "Pressure test";
const builder = (yargs) => {
    return yargs
        .option("u", {
        alias: "address",
        describe: "User address which adding the image",
        demandOption: "User address is required",
        type: "string",
    })
        .option("x", {
        alias: "priv",
        describe: "The priv of user address.",
        demandOption: "The priv is required for signing message.",
        type: "string",
    })
        .option("public_input", {
        describe: "public input of the proof, inputs must have format (0x)[0-f]*:(i64|bytes|bytes-packed) and been separated by spaces (eg: 0x12:i64 44:i64 32:i64).",
        type: "string",
        default: "",
    })
        .option("private_input", {
        describe: "private currently not supported",
        type: "string",
        default: "",
    })
        .option("submit_mode", {
        describe: "Submit mode for the proof, default is manual",
        type: "string",
        default: "manual",
    })
        .option("num_prove_tasks", {
        describe: "Number of prove tasks to run during a single interval in the pressure test, default is 1",
        type: "number",
        default: 1,
    })
        .option("interval_prove_tasks_ms", {
        describe: "Interval (msec) in which to run prove tasks during pressure test, default is 5000",
        type: "number",
        default: 5000,
    })
        .option("num_query_tasks", {
        describe: "Number of query tasks to run during a single interval in the pressure test, default is 1",
        type: "number",
        default: 1,
    })
        .option("interval_query_tasks_ms", {
        describe: "Interval (msec) in which to run query tasks during pressure test, default is 100",
        type: "number",
        default: 100,
    })
        .option("total_time_sec", {
        describe: "Total time of pressure test (sec), default is 10",
        type: "number",
        default: 10,
    })
        .option("verbose", {
        describe: "Enable verbose logging, default is false.",
        type: "boolean",
        default: false,
    })
        .option("image_md5s", {
        describe: "List of image md5s (one or more, comma seperated) to use for prove tasks. Overrides original behaviour of randomly selectly available images.",
        type: "string",
    })
        .option("query_tasks_only", {
        describe: "When generating random queries for pressure test, only generate ones that query 'task' collection.",
        type: "boolean",
        default: false,
    });
};
exports.builder = builder;
const handler = (argv) => __awaiter(void 0, void 0, void 0, function* () {
    console.log("Begin pressure test with args", argv);
    const image_mds_in = argv.image_md5s
        ? argv.image_md5s.split(",")
        : [];
    if (image_mds_in.length !== 0) {
        console.log("Using input image md5s", image_mds_in);
    }
    const proof_submit_mode = argv.submit_mode === "Auto" || argv.submit_mode === "auto"
        ? zkwasm_service_helper_1.ProofSubmitMode.Auto
        : zkwasm_service_helper_1.ProofSubmitMode.Manual;
    yield (0, task_1.pressureTest)(argv.r, argv.u, argv.x, argv.public_input, argv.private_input, proof_submit_mode, argv.num_prove_tasks, argv.interval_prove_tasks_ms, argv.num_query_tasks, argv.interval_query_tasks_ms, argv.total_time_sec, argv.verbose, argv.query_tasks_only, image_mds_in);
});
exports.handler = handler;
