"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.desc = exports.command = void 0;
const task_1 = require("../task");
exports.command = "addprovingtask";
exports.desc = "Add proving task";
const builder = (yargs) => {
    return yargs
        .option("i", {
        alias: "image",
        describe: "image md5",
        demandOption: "The image md5 is required",
        type: "string",
    })
        .option("u", {
        alias: "address",
        describe: "User address which adding the image",
        demandOption: "User address is required",
        type: "string",
    })
        .option("x", {
        alias: "priv",
        describe: "The priv of user address.",
        demandOption: "The priv is required for signing message.",
        type: "string",
    })
        .option("public_input", {
        describe: "public input of the proof, inputs must have format (0x)[0-f]*:(i64|bytes|bytes-packed) and been separated by spaces (eg: 0x12:i64 44:i64 32:i64).",
        type: "string",
    })
        .option("submit_mode", {
        describe: "Submit mode for the proof, default is manual",
        type: "string",
        default: "manual",
    })
        .option("private_input", {
        describe: "private currently not supported",
        type: "string",
    });
};
exports.builder = builder;
const handler = (argv) => __awaiter(void 0, void 0, void 0, function* () {
    console.log("Begin adding prove task for ", argv.i, argv.public_input);
    yield (0, task_1.addProvingTask)(argv.r, argv.u, argv.i, argv.public_input ? argv.public_input : "", argv.private_input ? argv.private_input : "", argv.submit_mode, argv.x);
});
exports.handler = handler;
