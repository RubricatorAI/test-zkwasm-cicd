"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.askQuestion = exports.hasPersonalMessage = exports.signMessageLocal = exports.signMessage = void 0;
const eth_crypto_1 = __importDefault(require("eth-crypto"));
const readline_1 = __importDefault(require("readline"));
const zkwasm_service_helper_1 = require("zkwasm-service-helper");
function signMessage(message, priv) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield zkwasm_service_helper_1.ZkWasmUtil.signMessage(message, priv);
    });
}
exports.signMessage = signMessage;
function signMessageLocal(message, priv) {
    const messageHash = hasPersonalMessage(message);
    return eth_crypto_1.default.sign(priv, messageHash);
}
exports.signMessageLocal = signMessageLocal;
function hasPersonalMessage(message) {
    const msg_len = message.length;
    const ETH_PREFIX = "\x19Ethereum Signed Message:\n" + msg_len;
    return eth_crypto_1.default.hash.keccak256(ETH_PREFIX + message);
}
exports.hasPersonalMessage = hasPersonalMessage;
function askQuestion(query) {
    return __awaiter(this, void 0, void 0, function* () {
        const rl = readline_1.default.createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        return new Promise((resolve) => rl.question(query, (ans) => {
            rl.close();
            resolve(ans);
        }));
    });
}
exports.askQuestion = askQuestion;
