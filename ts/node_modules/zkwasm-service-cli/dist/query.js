"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProverNodeList = exports.getAvailableImages = exports.queryStatistics = exports.queryConfig = exports.queryDispositHistory = exports.queryTxHistory = exports.queryUserSubscription = exports.queryUser = exports.queryImage = exports.queryTaskByTypeAndStatus = exports.queryTask = void 0;
const zkwasm_service_helper_1 = require("zkwasm-service-helper");
function queryTask(taskid, resturl, enable_logs = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let helper = new zkwasm_service_helper_1.ZkWasmServiceHelper(resturl, "", "", enable_logs);
        let args = {
            id: taskid,
            user_address: "",
            md5: "",
            tasktype: "",
            taskstatus: "",
        };
        return helper.loadTasks(args).then((res) => {
            const tasks = res;
            const task = tasks.data[0];
            let aggregate_proof = zkwasm_service_helper_1.ZkWasmUtil.bytesToBN(task.proof);
            let instances = zkwasm_service_helper_1.ZkWasmUtil.bytesToBN(task.instances);
            let batchInstances = zkwasm_service_helper_1.ZkWasmUtil.bytesToBN(task.batch_instances);
            let aux = zkwasm_service_helper_1.ZkWasmUtil.bytesToBN(task.aux);
            let fee = task.task_fee && zkwasm_service_helper_1.ZkWasmUtil.convertAmount(task.task_fee);
            if (enable_logs) {
                console.log("Task details: ");
                console.log("    ", task);
                console.log("    proof:");
                aggregate_proof.map((proof, _) => {
                    console.log("   0x", proof.toString("hex"));
                });
                console.log("    batch_instacne:");
                batchInstances.map((ins, _) => {
                    console.log("   0x", ins.toString("hex"));
                });
                console.log("    instacne:");
                instances.map((ins, _) => {
                    console.log("   0x", ins.toString("hex"));
                });
                console.log("    aux:");
                aux.map((aux, _) => {
                    console.log("   0x", aux.toString("hex"));
                });
                console.log("   fee:", fee);
            }
            return true;
        }).catch((err) => {
            if (enable_logs) {
                console.log("queryTask Error", err);
            }
            return false;
        });
    });
}
exports.queryTask = queryTask;
function queryTaskByTypeAndStatus(tasktype, taskstatus, resturl, enable_logs = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let helper = new zkwasm_service_helper_1.ZkWasmServiceHelper(resturl, "", "", enable_logs);
        let args = {
            id: "",
            user_address: "",
            md5: "",
            tasktype: tasktype,
            taskstatus: taskstatus,
        };
        return helper.loadTasks(args).then((res) => {
            if (enable_logs) {
                console.log("queryImage Success", res);
            }
            return true;
        }).catch((err) => {
            if (enable_logs) {
                console.log("queryTask Error", err);
            }
            return false;
        });
    });
}
exports.queryTaskByTypeAndStatus = queryTaskByTypeAndStatus;
function queryImage(md5, resturl, enable_logs = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let helper = new zkwasm_service_helper_1.ZkWasmServiceHelper(resturl, "", "", enable_logs);
        return helper.queryImage(md5).then((res) => {
            if (enable_logs) {
                console.log("queryImage Success", res);
            }
            return true;
        }).catch((err) => {
            if (enable_logs) {
                console.log("queryTask Error", err);
            }
            return false;
        });
    });
}
exports.queryImage = queryImage;
function queryUser(user_address, resturl, enable_logs = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let helper = new zkwasm_service_helper_1.ZkWasmServiceHelper(resturl, "", "", enable_logs);
        let args = {
            user_address: user_address,
        };
        return helper.queryUser(args).then((res) => {
            if (enable_logs) {
                console.log("queryUser Success", res);
            }
            return true;
        }).catch((err) => {
            if (enable_logs) {
                console.log("queryUser Error", err);
            }
            return false;
        });
    });
}
exports.queryUser = queryUser;
function queryUserSubscription(user_address, resturl, enable_logs = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let helper = new zkwasm_service_helper_1.ZkWasmServiceHelper(resturl, "", "", enable_logs);
        let args = {
            user_address: user_address,
        };
        return helper.queryUserSubscription(args).then((res) => {
            if (enable_logs) {
                console.log("queryUserSubscription Success", res);
            }
            return true;
        }).catch((err) => {
            if (enable_logs) {
                console.log("queryUserSubscription Error", err);
            }
            return false;
        });
    });
}
exports.queryUserSubscription = queryUserSubscription;
function queryTxHistory(user_address, resturl, enable_logs = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let helper = new zkwasm_service_helper_1.ZkWasmServiceHelper(resturl, "", "", enable_logs);
        let args = {
            user_address: user_address,
        };
        return helper.queryTxHistory(args).then((res) => {
            if (enable_logs) {
                console.log("queryTxHistory Success", res);
            }
            return true;
        }).catch((err) => {
            if (enable_logs) {
                console.log("queryTxHistory Error", err);
            }
            return false;
        });
    });
}
exports.queryTxHistory = queryTxHistory;
function queryDispositHistory(user_address, resturl, enable_logs = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let helper = new zkwasm_service_helper_1.ZkWasmServiceHelper(resturl, "", "", enable_logs);
        let args = {
            user_address: user_address,
        };
        return helper.queryDepositHistory(args).then((res) => {
            if (enable_logs) {
                console.log("queryDepositHistory Success", res);
            }
            return true;
        }).catch((err) => {
            if (enable_logs) {
                console.log("queryDepositHistory Error", err);
            }
            return false;
        });
    });
}
exports.queryDispositHistory = queryDispositHistory;
function queryConfig(resturl, enable_logs = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let helper = new zkwasm_service_helper_1.ZkWasmServiceHelper(resturl, "", "", enable_logs);
        return helper.queryConfig().then((res) => {
            if (enable_logs) {
                console.log("queryConfig Success", res);
            }
            return true;
        }).catch((err) => {
            if (enable_logs) {
                console.log("queryConfig Error", err);
            }
            return false;
        });
    });
}
exports.queryConfig = queryConfig;
function queryStatistics(resturl, enable_logs = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let helper = new zkwasm_service_helper_1.ZkWasmServiceHelper(resturl, "", "", enable_logs);
        return helper.loadStatistics().then((res) => {
            if (enable_logs) {
                console.log("loadStatistics Success", res);
            }
            return true;
        }).catch((err) => {
            if (enable_logs) {
                console.log("loadStatistics Error", err);
            }
            return false;
        });
    });
}
exports.queryStatistics = queryStatistics;
function getAvailableImages(resturl, user_address, enable_logs = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let helper = new zkwasm_service_helper_1.ZkWasmServiceHelper(resturl, "", "", enable_logs);
        let args = {
            id: "",
            user_address: user_address,
            md5: "",
            tasktype: "Setup",
            taskstatus: "Done",
        };
        return helper.loadTasks(args).then((res) => {
            const tasks = res;
            return tasks.data;
        }).catch((err) => {
            throw err;
        }).finally(() => {
            if (enable_logs) {
                console.log("Finish queryTask.");
            }
        });
    });
}
exports.getAvailableImages = getAvailableImages;
function getProverNodeList(resturl, enable_logs = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let helper = new zkwasm_service_helper_1.ZkWasmServiceHelper(resturl, "", "", enable_logs);
        let args = {
            total: 500,
        };
        return helper.queryNodeStatistics(args).then((res) => {
            return res.data;
        }).catch((err) => {
            throw err;
        }).finally(() => {
            if (enable_logs) {
                console.log("Finish GetProverNodeList");
            }
        });
    });
}
exports.getProverNodeList = getProverNodeList;
