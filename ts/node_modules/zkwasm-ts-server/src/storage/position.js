import mongoose from 'mongoose';
import { uint64FetchPlugin } from './object.js';
export function fromData(u64datasource, decoder) {
    const u64data = u64datasource.slice();
    // Ensure there are at least three elements.
    if (u64data.length < 4) {
        throw new Error("Not enough data to construct an ObjectInfo");
    }
    const oid = u64data.shift();
    const pid = [u64data.shift(), u64data.shift()];
    // Map each byte to a signed 8-bit integer.
    // For byte values greater than 127, subtract 256 to get the signed representation.
    //const attributes = leBytes.map(b => (b > 127 ? b - 256 : b));
    // Consume data from the beginning of the array.
    const object = decoder.fromData(u64data);
    // Return the constructed Card object.
    return {
        oid,
        pid,
        object: object,
    };
}
export function createPositionSchema(ObjectSchema) {
    // Define the schema for the Token model
    const objectSchema = new mongoose.Schema({
        oid: { type: BigInt, required: true, unique: true },
        pid: { type: [BigInt], require: true },
        object: { type: ObjectSchema, require: true },
    });
    objectSchema.pre('init', uint64FetchPlugin);
    return objectSchema;
}
export class PositionEvent {
    constructor(oid, pid, data, decoder) {
        this.oid = oid;
        this.pid = pid;
        this.data = data;
        this.decoder = decoder;
    }
    toObject() {
        return this.decoder.fromData(this.data);
    }
    toJSON() {
        return JSON.stringify(this.toObject());
    }
    static fromEvent(data, decoder) {
        return new PositionEvent(data[0], [data[1], data[2]], Array.from(data.slice(3)), decoder);
    }
    async storeRelatedObject(model) {
        let obj = this.toObject();
        let doc = await model.findOneAndUpdate({ oid: this.oid, pid: this.pid }, obj, { upsert: true });
        return doc;
    }
}
//# sourceMappingURL=position.js.map