import { Field } from "./field.js";
export declare const MaxHeight = 16;
export declare const BlockShift = 2;
export declare const BlockSize: number;
export interface PathInfo {
    root: Field;
    index: number;
    pathDigests: Field[][];
}
export declare class MerkleTree {
    static dbName: string;
    private currentSnapshotIdx;
    private cache;
    private db;
    private inMemoryMerkleTree;
    constructor(memData?: boolean);
    static emptyHashes: Field[];
    static emptyNodeHash(height: number): Field;
    private getRawNode;
    getNode(mtIndex: string): Promise<any>;
    setNode(mtIndex: string, value: Field): Promise<Map<any, any> | undefined>;
    startSnapshot(id: string): Promise<void>;
    endSnapshot(): Promise<void>;
    lastestSnapshot(): Promise<any>;
    loadSnapshot(latest_snapshot: string): Promise<void>;
    closeDb(): Promise<void>;
    private getNodeOrDefault;
    private getNodeOrCreate;
    private convertToMtIndex;
    private fillPath;
    getPath(index: number): Promise<PathInfo>;
    getLeave(index: number): Promise<any>;
    private getChildren;
    getLeaves(index: number): Promise<any[]>;
    private updateHash;
    getRoot(): Promise<any>;
    setLeave(index: number, value: Field): Promise<PathInfo>;
    setLeaves(index: number, values: Field[]): Promise<PathInfo>;
}
