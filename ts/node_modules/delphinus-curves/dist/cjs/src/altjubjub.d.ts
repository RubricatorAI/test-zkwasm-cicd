import BN from "bn.js";
import { Field } from "./field.js";
export declare class CurveField {
    readonly v: BN;
    get modulus(): BN;
    constructor(v: BN | number);
    add(f: CurveField): CurveField;
    mul(f: CurveField): CurveField;
    sub(f: CurveField): CurveField;
    neg(): CurveField;
    div(f: CurveField): CurveField;
    inv(): CurveField;
}
export declare class Point {
    readonly x: Field;
    readonly y: Field;
    constructor(x: Field | BN | number, y: Field | BN | number);
    get zero(): Point;
    isZero(): boolean;
    static get base(): Point;
    add(p: Point): Point;
    mul(p: CurveField | BN | number): Point;
}
export declare function bnToHexLe(n: BN, sz?: number): string;
export declare class PrivateKey {
    readonly key: CurveField;
    private pubk?;
    private constructor();
    static random(): PrivateKey;
    static fromString(str: string): PrivateKey;
    toString(): string;
    r(): CurveField;
    get publicKey(): PublicKey;
    hashMessage(msg: Uint8Array): BN;
    sign(message: Uint8Array): [[BN, BN], BN];
}
export declare class PublicKey {
    key: Point;
    private constructor();
    static fromPrivateKey(pk: PrivateKey): PublicKey;
}
