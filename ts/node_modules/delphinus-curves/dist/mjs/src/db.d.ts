import { Document, Db, Long } from "mongodb";
import { Field } from "./field.js";
export declare const local_uri = "mongodb://localhost:27017/";
export declare const merkle_tree_collection = "merkle_tree";
export declare const logging_collection = "merkle_tree_logging";
export declare const snapshot_id_collection = "merkle_tree_snapshot_id";
export declare const all_collections: string[];
export declare const default_snapshot_id = "0";
export interface PathDoc {
    path: string;
    field: string;
    snapshot: Long;
}
export interface SnapshotLog {
    path: string;
    old_field: string;
    field: string;
    old_snapshot: Long;
    snapshot: Long;
}
export declare class MerkleTreeDb {
    private readonly client;
    private readonly db_name;
    private connected;
    constructor(uri: string, db_name: string);
    private getMongoClient;
    closeMongoClient(): Promise<void>;
    cb_on_db<T>(cb: (database: Db) => T | Promise<T>): Promise<T>;
    private cb_on_db_tx;
    private cb_on_collection;
    private findOne;
    private updateOne;
    private updateWithLogging;
    updatePathLogging(k: string, old_value: Field, new_value: Field, _old_ss: string | Long, _ss: string | Long): Promise<void>;
    queryMerkleTreeNodeFromPath(k: string): Promise<{
        path: string;
        field: Field;
        snapshot: any;
    } | undefined>;
    updateLatestSnapshotId(_id: string | Long): Promise<Document | import("mongodb").UpdateResult>;
    queryLatestSnapshotId(): Promise<any>;
    restoreMerkleTree(_snapshot: string | Long): Promise<void>;
}
